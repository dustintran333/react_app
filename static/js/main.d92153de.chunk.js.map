{"version":3,"sources":["components/Todos.js","components/layout/Header.js","components/AddTodos.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getClass","ret","props","todo","completed","this","id","title","className","onClick","markComplete","bind","type","checked","onChange","markDelete","Component","Todos","todos","map","key","Header","class","to","home","AddTodos","state","onSubmit","e","preventDefault","addTodo","setState","alert","target","name","value","placeholder","style","flex","About","Fragment","lastID","App","id_clicked","splice","findIndex","console","log","concat","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d92153de.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TodoItem extends Component {\n\tgetClass = () =>{\n\t\tvar ret = 'todoItem';\n\t\tret = this.props.todo.completed ? ret + ' completedItem': ret;\n\t\treturn ret;\n\t};\n\trender() {\n\t\tconst {id, title, completed} = this.props.todo;\n\t\treturn (\n\t\t\t<div className={this.getClass()//function with () return values} //style={this.getStyle()\n\t\t\t}\n\t\t\t>\n\t\t\t\t<p onClick={this.props.markComplete.bind(this, id)}\t>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t\t checked={completed}\n\t\t\t\t\t\t\t\t onChange={() => {}}\n\t\t\t\t\t/>\n\t\t\t\t\t{id} {title}\n\t\t\t\t\t<button className={'delBtn'} onClick={this.props.markDelete.bind(this, id)}>\n\t\t\t\t\t\tX\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nclass Todos extends Component {\n\trender() {\n\t\treturn this.props.todos.map((todo) =>\n\t\t\t<TodoItem key={todo.id}\n\t\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t\t\tmarkComplete={this.props.markComplete}\n\t\t\t\t\t\t\t\tmarkDelete={this.props.markDelete}\n\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Todos;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {home} from \"../../App\";\nfunction Header() {\n\treturn (\n\t\t<header className={'headerStyle'}>\n\t\t\t<h1>Todo List</h1>\n\t\t\t<Link class={\"link-style\"} to={home}> Home </Link> | <Link class={\"link-style\"} to={home+'/about'}>About</Link>\n\t\t</header>\n\t)\n}\n\nexport default Header;\n","import React, {Component} from 'react';\n\nclass AddTodos extends Component {\n\tstate = {\n\t\ttitle: ''\n\t};\n\tonSubmit = (e)=>{\n\t\te.preventDefault();\n\t\tif(this.state.title)\n\t\t{\n\t\t\tthis.props.addTodo(this.state.title);\n\t\t\tthis.setState({title:''});\n\t\t}\n\t\telse alert(\"Please type in title\")\n\t\t//this.props.\n\t};\n\tonChange = (e)=> this.setState({\n\t\t[e.target.name]:e.target.value\n\t});\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.onSubmit} className=\"formAddTodo\">\n\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t name=\"title\"\n\t\t\t\t\t\t\t placeholder=\"Add Todo..\"\n\t\t\t\t\t\t\t style={{flex:'10'}}\n\t\t\t\t\t\t\t value={this.state.title}\n\t\t\t\t\t\t\t onChange={this.onChange}\n\t\t\t\t/>\n\t\t\t\t<input type=\"submit\"\n\t\t\t\t\t\t\t value=\"Submit\"\n\t\t\t\t\t\t\t className=\"btn\"\n\t\t\t\t\t\t\t style={{flex:'1'}}\n\t\t\t\t/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n\nexport default AddTodos;\n","import React from 'react';\r\n\r\nfunction About() {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h1>About</h1>\r\n\t\t\t<p>this is the TodoList app</p>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Todos from './components/Todos';\nimport Header from \"./components/layout/Header\";\nimport AddTodos from \"./components/AddTodos\";\nimport About from \"./components/pages/About\"\nimport './App.css';\nvar lastID = 3;\nclass App extends Component {\n\tstate = {\n\t\ttodos: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\ttitle: 'Task1 7AM',\n\t\t\t\tcompleted: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\ttitle: 'Task2 7AM',\n\t\t\t\tcompleted: false\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\ttitle: 'Task3 7AM',\n\t\t\t\tcompleted: false\n\t\t\t},\n\t\t]\n\t};\n\n\t// Toggle complete\n\tmarkComplete = (id) => {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.map(todo => {\n\t\t\t\tif (todo.id === id) todo.completed = !todo.completed\n\t\t\t\treturn todo;\n\t\t\t})\n\t\t})\n\t};\n\n\t// Delete item\n\tmarkDelete = (id_clicked) => {\n\t\tthis.state.todos.splice( //cool way to delete item using index\n\t\t\tthis.state.todos.findIndex(({id}) => { //find item by id, return index\n\t\t\t\treturn (id === id_clicked)\n\t\t\t}),\n\t\t\t1);\n\t\tconsole.log(this.state.todos);\n\t\t//Propagate changes\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos\n\t\t})\n\t};\n\n\t// Add Todo\n\taddTodo = (title) => {\n\t\tconsole.log(title)\n\t\tthis.setState({\n\t\t\ttodos:\n\t\t\t\tthis.state.todos.concat({\n\t\t\t\t\tid:++lastID,\n\t\t\t\t\ttitle:title,\n\t\t\t\t\tcompleted:false\n\t\t\t\t})\n\t\t})\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Header/>\n\t\t\t\t\t<Route exact path = {home} render = {props => (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<AddTodos addTodo={this.addTodo}></AddTodos>\n\t\t\t\t\t\t\t<Todos todos={this.state.todos}\n\t\t\t\t\t\t\t\t\t\t markComplete={this.markComplete}\n\t\t\t\t\t\t\t\t\t\t markDelete={this.markDelete}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}/>\n\t\t\t\t\t<Route path = {home+'/about'} component = {About}/>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\nexport var home='/react_app'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}